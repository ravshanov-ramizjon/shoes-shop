generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String?   @unique
  blog             String?   @default(uuid())
  password       String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  githubId       String?    @unique
  googleId       String?    @unique

  role           Role      @default(USER)
  orders         Order[]
  cartItems      CartItem[]
  accounts       Account[]
  sessions       Session[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Float
  image       String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderItems  OrderItem[]
  cartItems   CartItem[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("products")
}

model CartItem {
  id        String   @id @default(uuid())
  userId    Int
  productId String
  name      String
  image     String
  price     Float
  quantity  Int

  User      User     @relation(fields: [userId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
}

model Category {
  id       String   @id @default(uuid())
  name     String
  products Product[]

  @@map("categories")
}

model Order {
  id            String        @id @default(uuid())
  name          String
  phone         String
  address       String
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod @default(cash)

  user          User?         @relation(fields: [userId], references: [id])
  userId        Int
  items         OrderItem[]
  createdAt     DateTime      @default(now())

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  name      String
  price     Int
  quantity  Int
  image     String
}

enum OrderStatus {
  PENDING
  PROCESSED
  COMPLETED
  CANCELED
}

enum PaymentMethod {
  cash
  card
}

enum Role {
  USER
  ADMIN
  BLOCK
}
